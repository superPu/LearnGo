package main

/**
通过测试我们发现：

1、在同一个目录下，同一个文件夹下，不管是命令源码文件还是库源码文件，必须要保持声明同一个代码包，也就是说声明package的时候，必须要是一样的，
如果我们在pathDemo下在建一个go文件，如果package不一样，IDE是会报错的;
如果文件夹下有命令源码文件，那么其他的源码文件都声明为main包

2、但是我们可以声明为package 名称和包名称不一致的。
*/

/**
我们不能把所有的代码都搞到命令源码文件中把，为了代码的复用，我们需要把一些公用的函数给抽出来，
问题一：
如果把命令源码文件中的代码拆分到其他代码包中呢？
重新在建一个包，把公用的方法抽不出，然后命令源码文件在去引用这个包

问题二：
代码包导入的路径总是会与其所在的目录的相对路径一致吗？

记住一点：
源码文件所在目录相对于src目录的相对路径就是它的代码包导入的路径，但是你去使用这个路径的代码的
程序实体时给定的限定符要与它声明所属代码包名称对应

所以在写代码的时候为了避免这种情况就不要搞一些花里胡哨的，就让声明的包名和其父目录一样好了，真是的


问题三：

什么样的程序实体可以被当前包外的代码引用？

go的一个规则：
包级私有: private
公开：public 首字母大写 可见性


问题四： 还有其他的访问权限吗？
go1.5+
通过internal代码包让一些程序实体仅仅能被当前模块中的其他代码引用
internal代码包中声明的公开程序实体仅能被该代码包的直接父包以及子包中的代码引用




*/
import (
	"LearnGo/pathDemo/lib"
	"flag"
)

var name string

func init() {

	flag.StringVar(&name, "name", "everyone", "The greeting object")

}

func main() {

	flag.Parse()
	lib5.Hello("pujinwen")

}
